// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Openlet.Models;

#nullable disable

namespace Openlet.Migrations
{
    [DbContext(typeof(OpenletContext))]
    [Migration("20220919193257_InitialMigration")]
    partial class InitialMigration
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "6.0.9");

            modelBuilder.Entity("Openlet.Models.Card", b =>
                {
                    b.Property<int>("CardId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Definition")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("StudySetId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Term")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("CardId");

                    b.HasIndex("StudySetId");

                    b.ToTable("Cards");
                });

            modelBuilder.Entity("Openlet.Models.Learn", b =>
                {
                    b.Property<int>("LearnId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("StudySetId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("UserId")
                        .HasColumnType("INTEGER");

                    b.HasKey("LearnId");

                    b.HasIndex("StudySetId");

                    b.HasIndex("UserId");

                    b.ToTable("Learns");
                });

            modelBuilder.Entity("Openlet.Models.LearnCard", b =>
                {
                    b.Property<int>("LearnCardId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("CardId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("LastCardIndex")
                        .HasColumnType("INTEGER");

                    b.Property<int>("LearnId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Pool")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("RepeatedFalse")
                        .HasColumnType("INTEGER");

                    b.HasKey("LearnCardId");

                    b.HasIndex("CardId");

                    b.HasIndex("LearnId");

                    b.ToTable("LearnCards");
                });

            modelBuilder.Entity("Openlet.Models.StudySet", b =>
                {
                    b.Property<int>("StudySetId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(60)
                        .HasColumnType("TEXT");

                    b.Property<int>("UserId")
                        .HasColumnType("INTEGER");

                    b.HasKey("StudySetId");

                    b.HasIndex("UserId");

                    b.ToTable("StudySets");
                });

            modelBuilder.Entity("Openlet.Models.User", b =>
                {
                    b.Property<int>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<byte[]>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("BLOB");

                    b.Property<byte[]>("PasswordSalt")
                        .IsRequired()
                        .HasColumnType("BLOB");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("UserId");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("Openlet.Models.Card", b =>
                {
                    b.HasOne("Openlet.Models.StudySet", "StudySet")
                        .WithMany("Cards")
                        .HasForeignKey("StudySetId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("StudySet");
                });

            modelBuilder.Entity("Openlet.Models.Learn", b =>
                {
                    b.HasOne("Openlet.Models.StudySet", "StudySet")
                        .WithMany("Learns")
                        .HasForeignKey("StudySetId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Openlet.Models.User", "User")
                        .WithMany("Learns")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("StudySet");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Openlet.Models.LearnCard", b =>
                {
                    b.HasOne("Openlet.Models.Card", "Card")
                        .WithMany("LearnCards")
                        .HasForeignKey("CardId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Openlet.Models.Learn", "Learn")
                        .WithMany("LearnCards")
                        .HasForeignKey("LearnId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Card");

                    b.Navigation("Learn");
                });

            modelBuilder.Entity("Openlet.Models.StudySet", b =>
                {
                    b.HasOne("Openlet.Models.User", "User")
                        .WithMany("StudySets")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Openlet.Models.Card", b =>
                {
                    b.Navigation("LearnCards");
                });

            modelBuilder.Entity("Openlet.Models.Learn", b =>
                {
                    b.Navigation("LearnCards");
                });

            modelBuilder.Entity("Openlet.Models.StudySet", b =>
                {
                    b.Navigation("Cards");

                    b.Navigation("Learns");
                });

            modelBuilder.Entity("Openlet.Models.User", b =>
                {
                    b.Navigation("Learns");

                    b.Navigation("StudySets");
                });
#pragma warning restore 612, 618
        }
    }
}
